/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

#if SUPPORT_CLASS_VISIBILITY_PUBLIC
public
#fi
interface Node extends java.io.Serializable {
  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  void jjtOpen();

  /** This method is called after all the child nodes have been
    added. */
  void jjtClose();

  /** 
   * Set the parent node of this node
   * @param n parent node to set
   */
  void jjtSetParent(Node n);
  
  /**
   * @return parent node
   */
  Node jjtGetParent();

  /** 
   * This method tells the node to add its argument to the node's
   * list of children.
   * @param n node to add as a child
   * @param i zero-based index where to add the child  
   */
  void jjtAddChild(Node n, int i);

  /** 
   * This method returns a child node. The children are numbered
   * from zero, left to right.
   * @param i zero-baeed child index
   */
  Node jjtGetChild(int i);

  /** 
   * @return the number of children the node has. Always &ge; 0. 
   */
  int jjtGetNumChildren();

  int getId();
#if VISITOR

  /** Accept the visitor. **/
#if VISITOR_EXCEPTION
  ${VISITOR_RETURN_TYPE} jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-Object} data) throws ${VISITOR_EXCEPTION};
#else
  ${VISITOR_RETURN_TYPE} jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-Object} data);
#fi
#fi
}
