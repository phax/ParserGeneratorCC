/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
#if SUPPORT_CLASS_VISIBILITY_PUBLIC
public
#fi
class SimpleCharStream extends AbstractCharStream
{
  private java.io.Reader m_aIS;

  /** Constructor. */
  public SimpleCharStream(final java.io.Reader dstream,
                          final int startline,
                          final int startcolumn, 
                          final int buffersize)
  {
    super (startline, startcolumn, buffersize);
    m_aIS = dstream;
  }

  /** Constructor. */
  public SimpleCharStream(final java.io.Reader dstream,
                          final int startline,
                          final int startcolumn)
  {
    this(dstream, startline, startcolumn, DEFAULT_BUF_SIZE);
  }

  /** Constructor. */
  public SimpleCharStream(final java.io.Reader dstream)
  {
    this(dstream, 1, 1, DEFAULT_BUF_SIZE);
  }

  /** Reinitialise. */
  public void reInit(final java.io.Reader dstream, 
                     final int startline,
                     final int startcolumn, 
                     final int buffersize)
  {
    m_aIS = dstream;
    super.reInit (startline, startcolumn, buffersize);
  }

  /** Reinitialise. */
  public void reInit(final java.io.Reader dstream, 
                     final int startline,
                     final int startcolumn)
  {
    reInit(dstream, startline, startcolumn, DEFAULT_BUF_SIZE);
  }

  /** Reinitialise. */
  public void reInit(final java.io.Reader dstream)
  {
    reInit(dstream, 1, 1, DEFAULT_BUF_SIZE);
  }
  
  /** Constructor. */
#if AT_LEAST_JDK6
  public SimpleCharStream(final java.io.InputStream dstream, 
                          final java.nio.charset.Charset encoding, 
                          final int startline,
                          final int startcolumn,
                          final int buffersize) 
#else
  public SimpleCharStream(final java.io.InputStream dstream, 
                          final String encoding, 
                          final int startline,
                          final int startcolumn,
                          final int buffersize) throws java.io.UnsupportedEncodingException
#fi
  {
    this(new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
  }

  /** Constructor. */
#if AT_LEAST_JDK6
  public SimpleCharStream(final java.io.InputStream dstream,
                          final java.nio.charset.Charset encoding, 
                          final int startline,
                          final int startcolumn)
#else
  public SimpleCharStream(final java.io.InputStream dstream,
                          final String encoding, 
                          final int startline,
                          final int startcolumn) throws java.io.UnsupportedEncodingException
#fi
  {
    this(dstream, encoding, startline, startcolumn, DEFAULT_BUF_SIZE);
  }

  /** Constructor. */
#if AT_LEAST_JDK6
  public SimpleCharStream(final java.io.InputStream dstream, 
                          final java.nio.charset.Charset encoding)
#else
  public SimpleCharStream(final java.io.InputStream dstream, 
                          final String encoding) throws java.io.UnsupportedEncodingException
#fi
  {
    this(dstream, encoding, 1, 1, DEFAULT_BUF_SIZE);
  }

  /** Reinitialise. */
#if AT_LEAST_JDK6
  public void reInit(final java.io.InputStream dstream, 
                     final java.nio.charset.Charset encoding)
#else                     
  public void reInit(final java.io.InputStream dstream, 
                     final String encoding) throws java.io.UnsupportedEncodingException
#fi                     
  {
    reInit(dstream, encoding, 1, 1, DEFAULT_BUF_SIZE);
  }

  /** Reinitialise. */
#if AT_LEAST_JDK6
  public void reInit(final java.io.InputStream dstream, 
                     final java.nio.charset.Charset encoding, 
                     final int startline,
                     final int startcolumn)
#else                     
  public void reInit(final java.io.InputStream dstream, 
                     final String encoding, 
                     final int startline,
                     final int startcolumn) throws java.io.UnsupportedEncodingException
#fi                     
  {
    reInit(dstream, encoding, startline, startcolumn, DEFAULT_BUF_SIZE);
  }

  /** Reinitialise. */
#if AT_LEAST_JDK6
  public void reInit(final java.io.InputStream dstream, 
                     final java.nio.charset.Charset encoding, 
                     final int startline,
                     final int startcolumn, 
                     final int buffersize)
#else
  public void reInit(final java.io.InputStream dstream, 
                     final String encoding, 
                     final int startline,
                     final int startcolumn, 
                     final int buffersize) throws java.io.UnsupportedEncodingException
#fi
  {
    reInit(new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
  }

  @Override
  protected int streamRead (final char[] aBuf, final int nOfs, final int nLen) throws java.io.IOException
  {
    return m_aIS.read (aBuf, nOfs, nLen); 
  }
  
  @Override
  protected void streamClose () throws java.io.IOException
  {
    if (m_aIS != null)
      m_aIS.close (); 
  }
}
